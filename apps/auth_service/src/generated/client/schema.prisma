// Auth Service Database Schema
// Microservice: Authentication & Authorization
// Database: auth_service_db

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User authentication data
model User {
  user_id    Int      @id @default(autoincrement())
  username   String   @unique
  email      String   @unique
  password   String // Hashed password
  status     Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  // Relations
  roles    UserRole[]
  sessions UserSession[]

  @@map("users")
}

// Role definitions
model Role {
  role_id     Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  permissions String?  @db.Text // JSON string of permissions
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt

  // Relations
  users UserRole[]

  @@map("roles")
}

// User-Role relationship
model UserRole {
  user_id Int
  role_id Int

  // Relations
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [role_id], onDelete: Cascade)

  @@id([user_id, role_id])
  @@map("user_roles")
}

// User sessions for JWT management
model UserSession {
  session_id    String   @id @default(uuid())
  user_id       Int
  token         String   @unique
  refresh_token String?  @db.Text
  expires_at    DateTime
  created_at    DateTime @default(now())

  // Relations
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@map("user_sessions")
}
